<?php
declare(strict_types=1);

namespace App\Tests\Unit\User\Application\UseCase\User\CreateUser;

use App\User\Application\UseCase\User\CreateUser\CreateUser;
use App\User\Application\UseCase\User\CreateUser\DTO\CreateUserInputDTO;
use App\User\Application\UseCase\User\CreateUser\DTO\CreateUserOutputDTO;
use App\User\Domain\Model\User;
use App\User\Domain\Repository\UserRepository;
use App\User\Domain\Security\PasswordHasher;
use App\User\Domain\ValueObject\Uuid;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

class CreateUserTest extends TestCase
{
    private MockObject|UserRepository $userRepository;
    private MockObject|PasswordHasher $symfonyPasswordHasher;
    private MockObject|CreateUserInputDTO $createUserInputDTO;
    private CreateUser $createUser;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->userRepository = $this->getMockBuilder(UserRepository::class)->disableOriginalConstructor()->getMock();
        $this->symfonyPasswordHasher = $this->getMockBuilder(PasswordHasher::class)->disableOriginalConstructor()->getMock();
        $this->createUserInputDTO = CreateUserInputDTO::create(
                'Peter',
                'peter2@api.com',
                'Fake street 123',
                30,
                '123456',
                null
        );

        //$this->createUserInputDTO = $this->getMockBuilder(CreateUserInputDTO::class)->disableOriginalConstructor()->getMock();
        $this->createUser = new CreateUser($this->userRepository, $this->symfonyPasswordHasher);

    }

    public function testHandle(){

        $user = User::create(Uuid::random()->value(), $this->createUserInputDTO->name,
            $this->createUserInputDTO->email, $this->createUserInputDTO->address,$this->createUserInputDTO->age,null,
            $this->createUserInputDTO->roles);

        $user->setPassword($this->createUserInputDTO->password);

        $this->symfonyPasswordHasher
            ->expects($this->once())
            ->method('hashPasswordForUser')
            ->with($this->isInstanceOf(User::class), $this->isType('string'))
            ->willReturn('encoded-password');

        $result = $this->createUser->handle($this->createUserInputDTO);

        self::assertObjectHasAttribute('id', $result);
    }
}