<?php
declare(strict_types=1);

namespace App\Tests\Unit\User\Application\UseCase\User\ChangeUserPassword;

use App\User\Application\UseCase\User\ChangeUserPassword\ChangeUserPassword;
use App\User\Application\UseCase\User\ChangeUserPassword\DTO\ChangeUserPasswordInputDTO;
use App\User\Domain\Exception\InvalidPasswordException;
use App\User\Domain\Model\User;
use App\User\Domain\Repository\UserRepository;
use App\User\Domain\Security\PasswordHasher;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

class ChangeUserPasswordTest extends TestCase
{
    private const CUSTOMER_DATA = [
        'id' => '9b5c0b1f-09bf-4fed-acc9-fcaafc933a19',
        'name' => 'Peter',
        'email' => 'peter@api.com',
        'address' => 'Fake street 123',
        'age' => 30,
        'password' => '123456',
        'roles' => ['ROLE_ADMIN']
    ];
    private const HASHEDPASSWORD = '$2y$13$b6Q54t/g50Buw9WvFLr0POfR0aW6r9Y9pu1S5wjfLnihYsozfaDde';

    private MockObject|UserRepository $userRepository;
    private MockObject|PasswordHasher $symfonyPasswordHasher;
    private MockObject|ChangeUserPasswordInputDTO $changeUserPasswordInputDTO;

    private ChangeUserPassword $changeUserPassword;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->userRepository = $this->getMockBuilder(UserRepository::class)->disableOriginalConstructor()->getMock();

        $this->symfonyPasswordHasher = $this->getMockBuilder(PasswordHasher::class)->disableOriginalConstructor()
            ->getMock();
        $this->changeUserPassword = new ChangeUserPassword($this->userRepository, $this->symfonyPasswordHasher);
    }

    public function testHandleWithCorrectPasswords()
    {

        $user = User::create(
            self::CUSTOMER_DATA['id'],
            self::CUSTOMER_DATA['name'],
            self::CUSTOMER_DATA['email'],
            self::CUSTOMER_DATA['address'],
            self::CUSTOMER_DATA['age'],
            self::HASHEDPASSWORD,
            self::CUSTOMER_DATA['roles'],
        );

        $this->changeUserPasswordInputDTO = ChangeUserPasswordInputDTO::create(
          self::CUSTOMER_DATA['id'],
          self::CUSTOMER_DATA['password'],
          '123456'
        );

        $this->userRepository->expects($this->once())->method('findOneByIdOrFail')->with
        ($this->changeUserPasswordInputDTO->userId)->willReturn($user);

        $this->symfonyPasswordHasher
            ->expects($this->once())
            ->method('isPasswordValid')
            ->with($this->isInstanceOf(User::class), $this->isType('string'))
            ->willReturn(true);

        $this->userRepository
            ->expects($this->once())
            ->method('save');

        $this->changeUserPassword->handle($this->changeUserPasswordInputDTO);
    }
    public function testHandleWithIncorrectPasswords()
    {

        $user = User::create(
            self::CUSTOMER_DATA['id'],
            self::CUSTOMER_DATA['name'],
            self::CUSTOMER_DATA['email'],
            self::CUSTOMER_DATA['address'],
            self::CUSTOMER_DATA['age'],
            self::HASHEDPASSWORD,
            self::CUSTOMER_DATA['roles'],
        );

        $this->changeUserPasswordInputDTO = ChangeUserPasswordInputDTO::create(
            self::CUSTOMER_DATA['id'],
            self::CUSTOMER_DATA['password'],
            '123453'
        );

        $this->userRepository->expects($this->once())->method('findOneByIdOrFail')->with
        ($this->changeUserPasswordInputDTO->userId)->willReturn($user);

        $this->symfonyPasswordHasher
            ->expects($this->once())
            ->method('isPasswordValid')
            ->with($this->isInstanceOf(User::class), $this->isType('string'))
            ->willReturn(false);

        $this->expectException(InvalidPasswordException::class);


        $this->changeUserPassword->handle($this->changeUserPasswordInputDTO);
    }
}